<!DOCTYPE html>
<meta charset="utf-8">
	<head>
		<% include partials/head %>
		
		
		<style>
		#svg
		{
		    top: 250px;
		}
		
		.node {
		  stroke: #000;
		}
		
		.link {
		  stroke: #999;
		}

		</style>

		    <style>
		      h1 { font-size: 36px; margin: 10px 0; text-transform: uppercase; font-weight: normal;}
		      h2, h3 { font-size: 18px; margin: 5px 0 ; font-weight: normal;}
		      a:link { color: #EE3124; text-decoration: none;}
		      a:visited { color: #EE3124; }
		      a:active { color: #EE3124; }
		    </style>
		
	</head>
	
	<body class="container">
		<header>
			<% include partials/header %>
						
		</header>
<main>
	        <h1>Actor network map</h1>
	        <h2>Click to view their profile</h2>

<div>
<svg id="svg" width="1048" height="900"></svg>

<script src="https://d3js.org/d3.v4.min.js"></script>
<script>

// some colour variables
  var tcBlack = "#130C0E";


var width = 1048,
    height = 900,
    x_browser = 20,
    y_browser = 25,
    radius = 16;

var svg = d3.select("svg"),
    width = +svg.attr("width"),
    height = +svg.attr("height");

var simulation = d3.forceSimulation()
    .force("charge", d3.forceManyBody().strength(-500))
    .force("link", d3.forceLink().id(function(d) { return d._id; }).distance(40))
    .force("x", d3.forceX(width / 2))
    .force("y", d3.forceY(height / 2))
    .on("tick", ticked);

var link = svg.selectAll(".link"),
    node = svg.selectAll(".node");

d3.json("/actors/map/mapdata5/<%= workshop_id %>", function(error, graph) {
  if (error) throw error;

  simulation.nodes(graph.nodes);
  simulation.force("link").links(graph.links);

  link = link
    .data(graph.links)
    .enter().append("line")
      .attr("class", "link")
      .attr("stroke-width", function(d) { return Math.sqrt(d.value); });
	  //.attr("stroke-width", function(d) { return d.value; });
	  
  node = node
    .data(graph.nodes)
    .enter().append("g")
      .attr("class", "node")
  	  .call(d3.drag()
      	.on("start", dragstarted)
      	.on("drag", dragged)
      	.on("end", dragended));
	  
  node.append("svg:image")
      .attr("xlink:href", "/lego_pic.png")
      .attr("x", -8)
      .attr("y", -8)
      .attr("height", function(d) { return 20 * Math.sqrt(d.Scale); })
      .attr("width", function(d) { return 20 * Math.sqrt(d.Scale); })
        .on( 'mouseenter', function() {
          // select element in current context
			console.log('onmouseenter');
          d3.select( this )
            .transition()
            .attr("height", function(d) { return 30 * Math.sqrt(d.Scale); })
            .attr("width",  function(d) { return 30 * Math.sqrt(d.Scale); })
        })
        .on( 'mouseleave', function() {
			console.log('onmouseleave');
          d3.select( this )
            .transition()
            .attr("height", function(d) { return 20 * Math.sqrt(d.Scale); })
            .attr("width", function(d) { return 20 * Math.sqrt(d.Scale); })
        });
	  
  // Append hero name on roll over next to the node as well
  node.append("text")
      .attr("class", "nodetext")
      .attr("x", x_browser)
      .attr("y", y_browser)
      .attr("fill", tcBlack)
      .text(function(d) { return d.Name; });
	  
// make the image grow a little on mouse over and add the text details on click
var setEvents = node
        // Append hero text
        .on( 'click', function (d) {
            d3.select("h1").html(d.Name); 
            d3.select("h2").html ("Take me to " + "<a href='/actors/" + d._id + "' target='_blank'>"  + d.Name + " web page â‡¢"+ "</a>" ); 
         })

        .on( 'mouseenter', function() {
          // select element in current context
			console.log('onmouseenter');
          d3.select( this )
            .transition()
            .attr("height", function(d) { return 100 * Math.sqrt(d.Scale); })
            .attr("width",  function(d) { return 100 * Math.sqrt(d.Scale); });
        })
        // set back
        .on( 'mouseleave', function() {
			console.log('onmouseleave');
          d3.select( this )
            .transition()
            .attr("height", function(d) { return 20 * Math.sqrt(d.Scale); })
            .attr("width", function(d) { return 20 * Math.sqrt(d.Scale); });
        });
});

function ticked() {
	console.log('ticked');
  node.attr("transform", function(d) {
	  //var r = 16;
	  d.x = Math.max(radius, Math.min(width - radius, d.x));
	  d.y = Math.max(radius, Math.min(height - radius, d.y));
	  return "translate(" + d.x + "," + d.y + ")"
  });	

  link.attr("x1", function(d) { return d.source.x; })
      .attr("y1", function(d) { return d.source.y; })
      .attr("x2", function(d) { return d.target.x; })
      .attr("y2", function(d) { return d.target.y; });
	  
	//node.attr("cx", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
	//    .attr("cy", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });
    //node.attr("transform", function(d) { return "translate(" + cx + "," + cy + ")"; });  
  //node.attr("cx", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
  //    .attr("cy", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });
  //node.attr("cx", function(d) { return d.x; })
  //    .attr("cy", function(d) { return d.y; });
}



function dragstarted(d) {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d.fx = d.x;
  d.fy = d.y;
}

function dragged(d) {
  d.fx = d3.event.x;
  d.fy = d3.event.y;
}

function dragended(d) {
  if (!d3.event.active) simulation.alphaTarget(0);
  d.fx = null;
  d.fy = null;
}
</script>
</div>

</main>
<footer>
<% include partials/footer %>
</footer>		
</body>
</html>